// Code generated by MockGen. DO NOT EDIT.
// Source: ucaller.go

// Package mock_ucaller is a generated GoMock package.
package mock_ucaller

import (
	reflect "reflect"

	"github.com/AleksandrMac/ucaller/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockUCaller is a mock of UCaller interface.
type MockUCaller struct {
	ctrl     *gomock.Controller
	recorder *MockUCallerMockRecorder
}

// MockUCallerMockRecorder is the mock recorder for MockUCaller.
type MockUCallerMockRecorder struct {
	mock *MockUCaller
}

// NewMockUCaller creates a new mock instance.
func NewMockUCaller(ctrl *gomock.Controller) *MockUCaller {
	mock := &MockUCaller{ctrl: ctrl}
	mock.recorder = &MockUCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUCaller) EXPECT() *MockUCallerMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockUCaller) GetBalance() (*ucaller.ResponseBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*ucaller.ResponseBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUCallerMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUCaller)(nil).GetBalance))
}

// GetInfo mocks base method.
func (m *MockUCaller) GetInfo(uid ucaller.ID) (*ucaller.ResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", uid)
	ret0, _ := ret[0].(*ucaller.ResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUCallerMockRecorder) GetInfo(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUCaller)(nil).GetInfo), uid)
}

// GetService mocks base method.
func (m *MockUCaller) GetService() (*ucaller.ResponseService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(*ucaller.ResponseService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockUCallerMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockUCaller)(nil).GetService))
}

// InitCall mocks base method.
func (m *MockUCaller) InitCall(ic *ucaller.InitCall) (*ucaller.ResponseInitCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCall", ic)
	ret0, _ := ret[0].(*ucaller.ResponseInitCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitCall indicates an expected call of InitCall.
func (mr *MockUCallerMockRecorder) InitCall(ic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCall", reflect.TypeOf((*MockUCaller)(nil).InitCall), ic)
}

// InitRepeat mocks base method.
func (m *MockUCaller) InitRepeat(uid ucaller.ID) (*ucaller.ResponseInitRepeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRepeat", uid)
	ret0, _ := ret[0].(*ucaller.ResponseInitRepeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitRepeat indicates an expected call of InitRepeat.
func (mr *MockUCallerMockRecorder) InitRepeat(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRepeat", reflect.TypeOf((*MockUCaller)(nil).InitRepeat), uid)
}

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRequester) Get(url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequesterMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequester)(nil).Get), url)
}
